package yv.tils.migration

import data.Data

/**
 * MigrationYVtils is a module for YVtils that handles the migration of data from previous versions.
 *
 * @deprecated This module will be removed with these releases: yvtils-discord:4.1.0;
 * yvtils-smp:1.3.0; yvtils-multiMine:1.3.0
 */
@Deprecated(
    "This module will be removed with these releases: yvtils-discord:4.1.0; yvtils-smp:1.3.0; yvtils-multiMine:1.3.0"
)
class MigrationYVtils: Data.YVtilsModule {
    companion object {
        val MODULE =
            Data.YVtilsModuleData(
                name = "migration",
                version = "1.0.0",
                description = "Migration module for YVtils",
                author = "YVtils",
            )

        lateinit var oldPluginFolder: String
    }

    override fun onLoad() {
        // Enable debug logging early for migration if needed
        enableEarlyDebugMode()

        ConfigMigrator().migrateAllConfigs()
    }

    /** Enables debug mode early in the plugin lifecycle for migration logging */
    private fun enableEarlyDebugMode() {
        try {
            // Try to read debug settings directly from config file
            val configFile = files.FileUtils.loadYAMLFile("/config.yml")
            val debugActive = configFile.content.getBoolean("debug.active")
            val debugLevel = configFile.content.getInt("debug.level")

            if (debugActive) {
                logger.Logger.setDebugMode(debugActive, debugLevel)
            }
        } catch (_: Exception) {
        }
    }

    override fun enablePlugin() {
        Data.addModule(MODULE)
    }

    override fun onLateEnablePlugin() {}

    override fun disablePlugin() {}

    fun cleanUpMigrationTool() {
        // This function will be used to clean up any files generated by the migration tool
        // This will be called, when the migration logic is getting removed from the plugin
        // This will be called for one full minor version after the migration logic is removed
    }
}
